#include <iostream>
#include <thread>
#include <atomic>
#include <chrono>
#include <mutex>

using namespace std;

//thread가 2개가 되면 CPU에서 shared_memory의 값을 가져와서 더하고 반납하는 3단계가 원활하게 이루어지지 않는다. 고로 2000보다 낮은 값이 나온다.(race condition)
//atomic은 3단계를 한꺼번에 해결하게하는 struct이다.
//mutex는 lock()부터 unlock()까지는 다른 thread가 사용하지 못하게한다.
//lock_guard는 mutex를 unlock()으로 풀어줄 필요가 없기 때문에 자주 사용한다.(scoped_lock이 lastest version(c++17))

int main(){
    mutex mtx;
    atomic<int> shared_memory(0);
    auto count_func = [&](){
        for(int i = 0;i<1000;i++){
            //mtx.lock();

            //lock_guard<mutex> lock(mtx);
            //scoped_lock<mutex> lock(mtx);

            this_thread::sleep_for(chrono::milliseconds(1));
            shared_memory++;        //shared_memory.fetch_add(1)또한 가능.
            //mtx.unlock();
        }
    };

    thread t1 = thread(count_func);
    thread t2 = thread(count_func);

    t1.join();
    t2.join();

    cout << shared_memory << endl;
}