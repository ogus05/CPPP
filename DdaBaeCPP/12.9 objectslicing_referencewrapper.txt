#include <iostream>
#include <functional>					//reference_wrapper을 위해 필요한 library
#include <vector>

using namespace std;

class Base{
private:
	int m_i;
public:
	virtual void print(){
		cout << "Base" << endl;
	}
};

class Derived:public Base{
private:
	int m_j;
public:
	virtual void print() override{
		cout << "Dervied" << endl;
	}
};

int main(){
	Derived d;
	Base b = d;							//이런식으로 참조나 포인터가 아닌 복사대입을 하면 Object_Slicing이 발생하여 다형성이 없어진다.
	b.print();
	
	vector<Base> v1;
	v1.push_back(*new Derived());		//보통 이럴때 실수를 많이 하는데 이는 vector 내부에는 &로 ref이 불가능하므로 reference_wrapper을 사용한다.
	v1.push_back(*new Base());
	for(auto e : v1){
		e.get().print();
	}
}